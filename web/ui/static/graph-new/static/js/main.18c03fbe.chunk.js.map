{"version":3,"sources":["globals.ts","ExpressionInput.tsx","TimeInput.tsx","utils/timeFormat.ts","GraphControls.tsx","SeriesName.tsx","Legend.tsx","Graph.tsx","Panel.tsx","DataTable.tsx","utils/urlParams.ts","PanelList.tsx","App.tsx","index.tsx"],"names":["window","jQuery","jquery","moment","require","library","add","faSearch","faSpinner","ExpressionInput","prevNoMatchValue","exprInputRef","React","createRef","handleKeyPress","event","key","shiftKey","_this","props","executeQuery","current","value","preventDefault","renderAutosuggest","downshift","isOpen","inputValue","includes","matches","fuzzy","filter","replace","metricNames","pre","post","length","react_default","a","createElement","Object","assign","className","getMenuProps","slice","map","item","index","getItemProps","original","style","backgroundColor","highlightedIndex","fontWeight","selectedItem","dangerouslySetInnerHTML","__html","string","$exprInput","$","this","on","el","get","offset","offsetHeight","clientHeight","css","scrollHeight","_this2","downshift_esm","InputGroup","InputGroupAddon","addonType","InputGroupText","loading","react_fontawesome_index_es","icon","spin","Input","autoFocus","type","rows","onKeyPress","placeholder","innerRef","getInputProps","onKeyDown","nativeEvent","preventDownshiftDefault","closeMenu","blur","Button","color","onClick","Component","faChevronLeft","faChevronRight","faCalendarCheck","faArrowUp","faArrowDown","faTimes","dom","watch","TimeInput","timeInputRef","$time","getBaseTime","time","valueOf","increaseTime","range","onChangeTime","decreaseTime","clearTime","datetimepicker","icons","today","buttons","showClose","showToday","sideBySide","format","locale","timeZone","defaultDate","e","date","console","log","_this3","size","title","fixedWidth","onFocus","onBlur","rangeUnits","y","w","d","h","m","s","parseRange","rangeText","rangeRE","RegExp","match","parseInt","unit","formatRange","_i","_Object$keys","keys","parseTime","timeText","utc","formatTime","faPlus","faMinus","faChartArea","faChartLine","GraphControls","rangeRef","resolutionRef","rangeSteps","onChangeRangeInput","changeRangeInput","onChangeRange","increaseRange","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","decreaseRange","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","reverse","prevProps","resolution","toString","Form","inline","onSubmit","defaultValue","src_TimeInput","endTime","onChangeEndTime","res","onChangeResolution","bsSize","ButtonGroup","onChangeStacking","active","stacked","SeriesName","labels","labelNodes","first","label","push","Fragment","__name__","tsName","labelStrings","join","renderFormatted","renderPlain","PureComponent","Legend","src_SeriesName","series","renderLegendItem","graphID","PanelType","Graph","id","chartRef","formatValue","abs_y","Math","abs","toFixed","Error","str","entityMap","&","<",">","\"","'","/","String","escapeHTML","grid","hoverable","clickable","autoHighlight","mouseActiveRadius","legend","show","xaxis","mode","showTicks","showMinorTicks","timeBase","yaxis","tickFormatter","crosshair","tooltip","cssClass","content","xval","yval","flotItem","Date","toUTCString","renderLabels","defaultTheme","lines","stack","lineWidth","steps","fill","shadowSize","colors","colorPool","colorPoolSize","variation","neededColors","data","result","i","c","parse","scale","getColors","ts","pos","params","queryParams","t","startTime","values","parseValue","metric","val","parseFloat","isNaN","plot","destroyPlot","getData","getOptions","chart","destroy","_this4","Alert","resultType","esm","handleWidth","onResize","ref","src_Legend","DataTable","limited","limitSeries","valueText","v","whiteSpace","Table","hover","PanelDefaultOptions","expr","Panel","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","abortInFlightFetch","options","setOptions","abortController","AbortController","abort","setState","getEndTime","max","floor","url","URL","location","href","query","pathname","start","end","step","forEach","searchParams","append","fetch","cache","signal","then","resp","json","status","error","lastQueryParams","catch","name","message","handleExpressionChange","handleChangeRange","handleChangeEndTime","handleChangeResolution","handleChangeStacking","state","stats","prevState","prevOpts","opts","newOpts","objectSpread","onOptionsChanged","Row","Col","src_ExpressionInput","Nav","tabs","NavItem","NavLink","TabContent","activeTab","TabPane","tabId","src_DataTable","src_GraphControls","src_Graph","removePanel","decodePanelOptionsFromQueryString","sortedParams","p","paramFormat","test","sort","panelOpts","prefix","startsWith","addParam","substring","parseParams","split","param","_param$split","_param$split2","slicedToArray","opt","decodeURIComponent","PanelList","addPanel","panels","getKey","updateURL","panel","urlPanels","search","fetchMetricsError","timeDriftError","ok","statusText","browserTime","getTime","serverTime","delta","onpopstate","newPanels","o","panelParams","tab","range_input","end_input","moment_input","step_input","pp","encodeURIComponent","encodePanelOptionsToQueryString","history","pushState","src_Panel","handleOptionsChanged","App","Container","fluid","src_PanelList","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.18c03fbe.chunk.js","sourcesContent":["import jquery from 'jquery';\n\n(window as any).jQuery = jquery;\n(window as any).moment = require('moment');\n","import $ from 'jquery';\nimport React, { Component } from 'react';\nimport {\n  Button,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from 'reactstrap';\n\nimport Downshift, { ChildrenFunction, ControllerStateAndHelpers, DownshiftInterface } from 'downshift';\nimport fuzzy from 'fuzzy';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faSearch, faSpinner);\n\ninterface ExpressionInputProps {\n  value: string;\n  metricNames: string[];\n  executeQuery: (expr: string) => void;\n  loading: boolean;\n}\n\nclass ExpressionInput extends Component<ExpressionInputProps> {\n  prevNoMatchValue: string | null = null;\n  private exprInputRef = React.createRef<HTMLInputElement>();\n\n  handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      this.props.executeQuery(this.exprInputRef.current!.value);\n      event.preventDefault();\n    }\n  }\n\n  renderAutosuggest = (downshift: any) => {\n    if (!downshift.isOpen) {\n      return null;\n    }\n\n    if (this.prevNoMatchValue && downshift.inputValue.includes(this.prevNoMatchValue)) {\n      return null;\n    }\n\n    let matches = fuzzy.filter(downshift.inputValue.replace(/ /g, ''), this.props.metricNames, {\n      pre: \"<strong>\",\n      post: \"</strong>\",\n    });\n\n    if (matches.length === 0) {\n      this.prevNoMatchValue = downshift.inputValue;\n      return null;\n    }\n\n    return (\n      <ul className=\"autosuggest-dropdown\" {...downshift.getMenuProps()}>\n        {\n          matches\n            .slice(0, 200) // Limit DOM rendering to 100 results, as DOM rendering is sloooow.\n            .map((item, index) => (\n              <li\n                {...downshift.getItemProps({\n                  key: item.original,\n                  index,\n                  item: item.original,\n                  style: {\n                    backgroundColor:\n                      downshift.highlightedIndex === index ? 'lightgray' : 'white',\n                    fontWeight: downshift.selectedItem === item ? 'bold' : 'normal',\n                  },\n                })}\n              >\n                {/* TODO: Find better way than setting inner HTML dangerously. We just want the <strong> to not be escaped.\n                    This will be a problem when we save history and the user enters HTML into a query. */}\n                <span dangerouslySetInnerHTML={{__html: item.string}}></span>\n              </li>\n            ))\n        }\n      </ul>\n    );\n  }\n\n  componentDidMount() {\n    const $exprInput = $(this.exprInputRef.current!);\n    $exprInput.on('input', () => {\n      const el = $exprInput.get(0);\n      const offset = el.offsetHeight - el.clientHeight;\n      $exprInput.css('height', 'auto').css('height', el.scrollHeight + offset);\n    });\n  }\n\n  render() {\n    return (\n        <Downshift\n          //inputValue={this.props.value}\n          //onInputValueChange={this.props.onChange}\n          selectedItem={this.props.value}\n        >\n          {(downshift) => (\n            <div>\n              <InputGroup className=\"expression-input\">\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>\n                  {this.props.loading ? <FontAwesomeIcon icon=\"spinner\" spin/> : <FontAwesomeIcon icon=\"search\"/>}\n                  </InputGroupText>\n                </InputGroupAddon>\n\n                <Input\n                  autoFocus\n                  type=\"textarea\"\n                  rows=\"1\"\n                  onKeyPress={this.handleKeyPress}\n                  placeholder=\"Expression (press Shift+Enter for newlines)\"\n                  innerRef={this.exprInputRef}\n                  {...downshift.getInputProps({\n                    onKeyDown: (event: React.KeyboardEvent): void => {\n                      switch (event.key) {\n                        case 'Home':\n                        case 'End':\n                          // We want to be able to jump to the beginning/end of the input field.\n                          // By default, Downshift otherwise jumps to the first/last suggestion item instead.\n                          (event.nativeEvent as any).preventDownshiftDefault = true;\n                          break;\n                        case 'ArrowUp':\n                        case 'ArrowDown':\n                          if (!downshift.isOpen) {\n                            (event.nativeEvent as any).preventDownshiftDefault = true;\n                          }\n                          break;\n                        case 'Enter':\n                          downshift.closeMenu();\n                          break;\n                        case 'Escape':\n                          if (!downshift.isOpen) {\n                            this.exprInputRef.current!.blur();\n                          }\n                          break;\n                        default:\n                      }\n                    }\n                  } as any)}\n                />\n                <InputGroupAddon addonType=\"append\">\n                  <Button className=\"execute-btn\" color=\"primary\" onClick={() => this.props.executeQuery(this.exprInputRef.current!.value)}>Execute</Button>\n                </InputGroupAddon>\n              </InputGroup>\n              {this.renderAutosuggest(downshift)}\n            </div>\n          )}\n        </Downshift>\n    );\n  }\n}\n\nexport default ExpressionInput;\n","import $ from 'jquery';\nimport React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, Input } from 'reactstrap';\n\nimport moment from 'moment-timezone';\n\nimport 'tempusdominus-core';\nimport 'tempusdominus-bootstrap-4';\nimport '../node_modules/tempusdominus-bootstrap-4/build/css/tempusdominus-bootstrap-4.min.css';\n\nimport { dom, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faCalendarCheck,\n  faArrowUp,\n  faArrowDown,\n  faTimes,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n  faChevronLeft,\n  faChevronRight,\n  faCalendarCheck,\n  faArrowUp,\n  faArrowDown,\n  faTimes,\n);\n\n// Sadly needed to also replace <i> within the date picker, since it's not a React component.\ndom.watch();\n\ninterface TimeInputProps {\n  time: number | null; // Timestamp in milliseconds.\n  range: number; // Range in seconds.\n  placeholder: string;\n\n  onChangeTime: (time: number | null) => void;\n}\n\nclass TimeInput extends Component<TimeInputProps> {\n  private timeInputRef = React.createRef<HTMLInputElement>();\n  private $time: any | null = null;\n\n  getBaseTime = (): number => {\n    return this.props.time || moment().valueOf();\n  }\n\n  increaseTime = (): void => {\n    const time = this.getBaseTime() + this.props.range*1000/2;\n    this.props.onChangeTime(time);\n  }\n\n  decreaseTime = (): void => {\n    const time = this.getBaseTime() - this.props.range*1000/2;\n    this.props.onChangeTime(time);\n  }\n\n  clearTime = (): void => {\n    this.props.onChangeTime(null);\n  }\n\n  componentDidMount() {\n    this.$time = $(this.timeInputRef.current!);\n\n    this.$time.datetimepicker({\n      icons: {\n        today: 'fas fa-calendar-check',\n      },\n      buttons: {\n        //showClear: true,\n        showClose: true,\n        showToday: true,\n      },\n      sideBySide: true,\n      format: 'YYYY-MM-DD HH:mm',\n      locale: 'en',\n      timeZone: 'UTC',\n      defaultDate: this.props.time,\n    });\n\n    this.$time.on('change.datetimepicker', (e: any) => {\n      if (e.date) {\n        this.props.onChangeTime(e.date.valueOf());\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.$time.datetimepicker('destroy');\n  }\n\n  componentDidUpdate() {\n    console.log(this.props);\n    this.$time.datetimepicker('date', this.props.time ? moment(this.props.time) : null);\n  }\n\n  render() {\n    return (\n      <InputGroup className=\"time-input\" size=\"sm\">\n        <InputGroupAddon addonType=\"prepend\">\n          <Button title=\"Decrease time\" onClick={this.decreaseTime}><FontAwesomeIcon icon=\"chevron-left\" fixedWidth/></Button>\n        </InputGroupAddon>\n\n        <Input\n          placeholder={this.props.placeholder}\n          innerRef={this.timeInputRef}\n          onFocus={() => this.$time.datetimepicker('show')}\n          onBlur={() => this.$time.datetimepicker('hide')}\n          onKeyDown={(e) => ['Escape', 'Enter'].includes(e.key) && this.$time.datetimepicker('hide')}\n        />\n\n        {/* CAUTION: While the datetimepicker also has an option to show a 'clear' button,\n            that functionality is broken, so we create an external solution instead. */}\n        {this.props.time &&\n          <InputGroupAddon addonType=\"append\">\n            <Button className=\"clear-time-btn\" title=\"Clear time\" onClick={this.clearTime}><FontAwesomeIcon icon=\"times\" fixedWidth/></Button>\n          </InputGroupAddon>\n        }\n\n        <InputGroupAddon addonType=\"append\">\n          <Button title=\"Increase time\" onClick={this.increaseTime}><FontAwesomeIcon icon=\"chevron-right\" fixedWidth/></Button>\n        </InputGroupAddon>\n      </InputGroup>\n    );\n  }\n}\n\nexport default TimeInput;\n","import moment from 'moment-timezone';\n\nconst rangeUnits: {[unit: string]: number} = {\n  'y': 60 * 60 * 24 * 365,\n  'w': 60 * 60 * 24 * 7,\n  'd': 60 * 60 * 24,\n  'h': 60 * 60,\n  'm': 60,\n  's': 1\n}\n\nexport function parseRange(rangeText: string): number | null {\n  const rangeRE = new RegExp('^([0-9]+)([ywdhms]+)$');\n  const matches = rangeText.match(rangeRE);\n  if (!matches || matches.length !== 3) {\n    return null;\n  }\n  const value = parseInt(matches[1]);\n  const unit = matches[2];\n  return value * rangeUnits[unit];\n}\n\nexport function formatRange(range: number): string {\n  for (let unit of Object.keys(rangeUnits)) {\n    if (range % rangeUnits[unit] === 0) {\n      return (range / rangeUnits[unit]) + unit;\n    }\n  }\n  return range + 's';\n}\n\nexport function parseTime(timeText: string): number {\n  return moment.utc(timeText).valueOf();\n}\n\nexport function formatTime(time: number): string {\n  return moment.utc(time).format('YYYY-MM-DD HH:mm');\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  ButtonGroup,\n  Form,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n} from 'reactstrap';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faPlus,\n  faMinus,\n  faChartArea,\n  faChartLine,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport TimeInput from './TimeInput';\nimport { parseRange, formatRange } from './utils/timeFormat';\n\nlibrary.add(\n  faPlus,\n  faMinus,\n  faChartArea,\n  faChartLine,\n);\n\ninterface GraphControlsProps {\n  range: number;\n  endTime: number | null;\n  resolution: number | null;\n  stacked: boolean;\n\n  onChangeRange: (range: number) => void;\n  onChangeEndTime: (endTime: number | null) => void;\n  onChangeResolution: (resolution: number | null) => void;\n  onChangeStacking: (stacked: boolean) => void;\n}\n\nclass GraphControls extends Component<GraphControlsProps> {\n  private rangeRef = React.createRef<HTMLInputElement>();\n  private resolutionRef = React.createRef<HTMLInputElement>();\n\n  rangeSteps = [\n    1,\n    10,\n    60,\n    5*60,\n    15*60,\n    30*60,\n    60*60,\n    2*60*60,\n    6*60*60,\n    12*60*60,\n    24*60*60,\n    48*60*60,\n    7*24*60*60,\n    14*24*60*60,\n    28*24*60*60,\n    56*24*60*60,\n    365*24*60*60,\n    730*24*60*60,\n  ]\n\n  onChangeRangeInput = (rangeText: string): void => {\n    const range = parseRange(rangeText);\n    if (range === null) {\n      this.changeRangeInput(this.props.range);\n    } else {\n      this.props.onChangeRange(range);\n    }\n  }\n\n  changeRangeInput = (range: number): void => {\n    this.rangeRef.current!.value = formatRange(range);\n  }\n\n  increaseRange = (): void => {\n    for (let range of this.rangeSteps) {\n      if (this.props.range < range) {\n        this.changeRangeInput(range);\n        this.props.onChangeRange(range);\n        return;\n      }\n    }\n  }\n\n  decreaseRange = (): void => {\n    for (let range of this.rangeSteps.slice().reverse()) {\n      if (this.props.range > range) {\n        this.changeRangeInput(range);\n        this.props.onChangeRange(range);\n        return;\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: GraphControlsProps) {\n    if (prevProps.range !== this.props.range) {\n      this.changeRangeInput(this.props.range);\n    }\n    if (prevProps.resolution !== this.props.resolution) {\n      this.resolutionRef.current!.value = this.props.resolution !== null ? this.props.resolution.toString() : '';\n    }\n  }\n\n  render() {\n    return (\n      <Form inline className=\"graph-controls\" onSubmit={e => e.preventDefault()}>\n        <InputGroup className=\"range-input\" size=\"sm\">\n          <InputGroupAddon addonType=\"prepend\">\n            <Button title=\"Decrease range\" onClick={this.decreaseRange}><FontAwesomeIcon icon=\"minus\" fixedWidth/></Button>\n          </InputGroupAddon>\n\n          <Input\n            defaultValue={formatRange(this.props.range)}\n            innerRef={this.rangeRef}\n            onBlur={() => this.onChangeRangeInput(this.rangeRef.current!.value)}\n          />\n\n          <InputGroupAddon addonType=\"append\">\n            <Button title=\"Increase range\" onClick={this.increaseRange}><FontAwesomeIcon icon=\"plus\" fixedWidth/></Button>\n          </InputGroupAddon>\n        </InputGroup>\n\n        <TimeInput\n          time={this.props.endTime}\n          range={this.props.range}\n          placeholder=\"End time\"\n          onChangeTime={this.props.onChangeEndTime}\n        />\n\n        <Input\n          placeholder=\"Res. (s)\"\n          className=\"resolution-input\"\n          defaultValue={this.props.resolution !== null ? this.props.resolution.toString() : ''}\n          innerRef={this.resolutionRef}\n          onBlur={() => {\n            const res = parseInt(this.resolutionRef.current!.value);\n            this.props.onChangeResolution(res ? res : null);\n          }}\n          bsSize=\"sm\"\n        />\n\n        <ButtonGroup className=\"stacked-input\" size=\"sm\">\n          <Button title=\"Show unstacked line graph\" onClick={() => this.props.onChangeStacking(false)} active={!this.props.stacked}><FontAwesomeIcon icon=\"chart-line\" fixedWidth/></Button>\n          <Button title=\"Show stacked graph\" onClick={() => this.props.onChangeStacking(true)} active={this.props.stacked}><FontAwesomeIcon icon=\"chart-area\" fixedWidth/></Button>\n        </ButtonGroup>\n      </Form>\n    );\n  }\n}\n\nexport default GraphControls;\n","import React, { PureComponent } from \"react\";\n\ninterface SeriesNameProps {\n  labels: {[key: string]: string} | null;\n  format: boolean;\n}\n\nclass SeriesName extends PureComponent<SeriesNameProps> {\n  renderFormatted(): React.ReactNode {\n    const labels = this.props.labels!;\n\n    let labelNodes: React.ReactNode[] = [];\n    let first = true;\n    for (let label in labels) {\n      if (label === '__name__') {\n        continue;\n      }\n\n      labelNodes.push(\n        <span key={label}>\n          {!first && ', '}\n          <span className=\"legend-label-name\">{label}</span>=\n          <span className=\"legend-label-value\">\"{labels[label]}\"</span>\n        </span>\n      );\n\n      if (first) {\n        first = false;\n      }\n    }\n\n    return (\n      <>\n        <span className=\"legend-metric-name\">{labels.__name__ || ''}</span>\n        <span className=\"legend-label-brace\">{'{'}</span>\n          {labelNodes}\n        <span className=\"legend-label-brace\">{'}'}</span>\n      </>\n    );\n  }\n\n  renderPlain() {\n    const labels = this.props.labels!;\n\n    let tsName = (labels.__name__ || '') + '{';\n    let labelStrings: string[] = [];\n    for (let label in labels) {\n      if (label !== '__name__') {\n        labelStrings.push(label + '=\"' + labels[label] + '\"');\n      }\n    }\n    tsName += labelStrings.join(', ') + '}';\n    return tsName;\n  }\n\n  render() {\n    if (this.props.labels === null) {\n      return 'scalar';\n    }\n\n    if (this.props.format) {\n      return this.renderFormatted();\n    }\n    // Return a simple text node. This is much faster to scroll through\n    // for longer lists (hundreds of items).\n    return this.renderPlain();\n  }\n}\n\nexport default SeriesName;\n","import React, { PureComponent } from 'react';\n\nimport SeriesName from './SeriesName';\n\ninterface LegendProps {\n  series: any; // TODO: Type this.\n}\n\nclass Legend extends PureComponent<LegendProps> {\n  renderLegendItem(s: any) {\n    return (\n      <tr key={s.index} className=\"legend-item\">\n        <td>\n          <div className=\"legend-swatch\" style={{backgroundColor: s.color}}></div>\n        </td>\n        <td>\n          <SeriesName labels={s.labels} format={true} />\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    return (\n      <table className=\"graph-legend\">\n        <tbody>\n          {this.props.series.map((s: any) => {return this.renderLegendItem(s)})}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Legend;\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\n\nimport { Alert } from 'reactstrap';\n\nrequire('flot');\nrequire('flot/source/jquery.flot.crosshair');\nrequire('flot/source/jquery.flot.legend');\nrequire('flot/source/jquery.flot.time');\nrequire('flot/source/jquery.canvaswrapper');\nrequire('jquery.flot.tooltip');\n\nimport Legend from './Legend';\n\nvar graphID = 0;\nfunction getGraphID() {\n  // TODO: This is ugly.\n  return graphID++;\n}\n\ninterface GraphProps {\n  data: any; // TODO: Type this.\n  stacked: boolean;\n  queryParams: {\n    startTime: number,\n    endTime: number,\n    resolution: number,\n  } | null;\n}\n\nclass Graph extends PureComponent<GraphProps> {\n  private id: number = getGraphID();\n  private chartRef = React.createRef<HTMLDivElement>();\n\n  escapeHTML(str: string) {\n    var entityMap: {[key: string]: string} = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;'\n    };\n\n    return String(str).replace(/[&<>\"'/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  renderLabels(labels: {[key: string]: string}) {\n    let labelStrings: string[] = [];\n    for (let label in labels) {\n      if (label !== '__name__') {\n        labelStrings.push('<strong>' + label + '</strong>: ' + this.escapeHTML(labels[label]));\n      }\n    }\n    return '<div class=\"labels\">' + labelStrings.join('<br>') + '</div>';\n  };\n\n  formatValue = (y: number | null): string => {\n    if (y === null) {\n      return 'null';\n    }\n    var abs_y = Math.abs(y);\n    if (abs_y >= 1e24) {\n      return (y / 1e24).toFixed(2) + \"Y\";\n    } else if (abs_y >= 1e21) {\n      return (y / 1e21).toFixed(2) + \"Z\";\n    } else if (abs_y >= 1e18) {\n      return (y / 1e18).toFixed(2) + \"E\";\n    } else if (abs_y >= 1e15) {\n      return (y / 1e15).toFixed(2) + \"P\";\n    } else if (abs_y >= 1e12) {\n      return (y / 1e12).toFixed(2) + \"T\";\n    } else if (abs_y >= 1e9) {\n      return (y / 1e9).toFixed(2) + \"G\";\n    } else if (abs_y >= 1e6) {\n      return (y / 1e6).toFixed(2) + \"M\";\n    } else if (abs_y >= 1e3) {\n      return (y / 1e3).toFixed(2) + \"k\";\n    } else if (abs_y >= 1) {\n      return y.toFixed(2)\n    } else if (abs_y === 0) {\n      return y.toFixed(2)\n    } else if (abs_y <= 1e-24) {\n      return (y / 1e-24).toFixed(2) + \"y\";\n    } else if (abs_y <= 1e-21) {\n      return (y / 1e-21).toFixed(2) + \"z\";\n    } else if (abs_y <= 1e-18) {\n      return (y / 1e-18).toFixed(2) + \"a\";\n    } else if (abs_y <= 1e-15) {\n      return (y / 1e-15).toFixed(2) + \"f\";\n    } else if (abs_y <= 1e-12) {\n      return (y / 1e-12).toFixed(2) + \"p\";\n    } else if (abs_y <= 1e-9) {\n      return (y / 1e-9).toFixed(2) + \"n\";\n    } else if (abs_y <= 1e-6) {\n      return (y / 1e-6).toFixed(2) + \"µ\";\n    } else if (abs_y <=1e-3) {\n      return (y / 1e-3).toFixed(2) + \"m\";\n    } else if (abs_y <= 1) {\n      return y.toFixed(2)\n    }\n    throw Error(\"couldn't format a value, this is a bug\");\n  }\n\n  getOptions(): any {\n    return {\n      grid: {\n        hoverable: true,\n        clickable: true,\n        autoHighlight: true,\n        mouseActiveRadius: 100,\n      },\n      legend: {\n        show: false,\n      },\n      xaxis: {\n        mode: 'time',\n        showTicks: true,\n        showMinorTicks: true,\n        timeBase: 'milliseconds',\n      },\n      yaxis: {\n        tickFormatter: this.formatValue,\n      },\n      crosshair: {\n        mode: 'xy',\n        color: '#bbb',\n      },\n      tooltip: {\n        show: true,\n        cssClass: 'graph-tooltip',\n        content: (label: string, xval: number, yval: number, flotItem: any) => {\n          const series = flotItem.series; // TODO: type this.\n          var date = '<span class=\"date\">' + new Date(xval).toUTCString() + '</span>';\n          var swatch = '<span class=\"detail-swatch\" style=\"background-color: ' + series.color + '\"></span>';\n          var content = swatch + (series.labels.__name__ || 'value') + \": <strong>\" + yval + '</strong>';\n          return date + '<br>' + content + '<br>' + this.renderLabels(series.labels);\n        },\n        defaultTheme: false,\n        lines: true,\n      },\n      series: {\n        stack: this.props.stacked,\n        lines: {\n          lineWidth: this.props.stacked ? 1 : 2,\n          steps: false,\n          fill: this.props.stacked,\n        },\n        shadowSize: 0,\n      }\n    };\n  }\n\n  // This was adapted from Flot's color generation code.\n  getColors() {\n    let colors = [];\n    const colorPool = [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"];\n    const colorPoolSize = colorPool.length;\n    let variation = 0;\n    const neededColors = this.props.data.result.length;\n\n    for (let i = 0; i < neededColors; i++) {\n      const c = ($ as any).color.parse(colorPool[i % colorPoolSize] || \"#666\");\n\n      // Each time we exhaust the colors in the pool we adjust\n      // a scaling factor used to produce more variations on\n      // those colors. The factor alternates negative/positive\n      // to produce lighter/darker colors.\n\n      // Reset the variation after every few cycles, or else\n      // it will end up producing only white or black colors.\n\n      if (i % colorPoolSize === 0 && i) {\n        if (variation >= 0) {\n          if (variation < 0.5) {\n            variation = -variation - 0.2;\n          } else variation = 0;\n        } else variation = -variation;\n      }\n\n      colors[i] = c.scale('rgb', 1 + variation);\n    }\n\n    return colors;\n  }\n\n  getData() {\n    const colors = this.getColors();\n\n    return this.props.data.result.map((ts: any /* TODO: Type this*/, index: number) => {\n      // Insert nulls for all missing steps.\n      let data = [];\n      let pos = 0;\n      const params = this.props.queryParams!;\n\n      for (let t = params.startTime; t <= params.endTime; t += params.resolution) {\n        // Allow for floating point inaccuracy.\n        if (ts.values.length > pos && ts.values[pos][0] < t + params.resolution / 100) {\n          data.push([ts.values[pos][0] * 1000, this.parseValue(ts.values[pos][1])]);\n          pos++;\n        } else {\n          // TODO: Flot has problems displaying intermittent \"null\" values when stacked,\n          // resort to 0 now. In Grafana this works for some reason, figure out how they\n          // do it.\n          data.push([t * 1000, this.props.stacked ? 0 : null]);\n        }\n      }\n\n      return {\n        labels: ts.metric !== null ? ts.metric : {},\n        data: data,\n        color: colors[index],\n        index: index,\n      };\n    })\n  }\n\n  parseValue(value: string) {\n    var val = parseFloat(value);\n    if (isNaN(val)) {\n      // \"+Inf\", \"-Inf\", \"+Inf\" will be parsed into NaN by parseFloat(). They\n      // can't be graphed, so show them as gaps (null).\n\n      // TODO: Flot has problems displaying intermittent \"null\" values when stacked,\n      // resort to 0 now. In Grafana this works for some reason, figure out how they\n      // do it.\n      return this.props.stacked ? 0 : null;\n    }\n    return val;\n  };\n\n  componentDidMount() {\n    this.plot();\n  }\n\n  componentDidUpdate() {\n    this.plot();\n  }\n\n  componentWillUnmount() {\n    this.destroyPlot();\n  }\n\n  plot() {\n    if (this.chartRef.current === null) {\n      return;\n    }\n    this.destroyPlot();\n    $.plot($(this.chartRef.current!), this.getData(), this.getOptions());\n  }\n\n  destroyPlot() {\n    const chart = $(this.chartRef.current!).data('plot');\n    if (chart !== undefined) {\n      chart.destroy();\n    }\n  }\n\n  render() {\n    if (this.props.data === null) {\n      return <Alert color=\"light\">No data queried yet</Alert>;\n    }\n\n    if (this.props.data.resultType !== 'matrix') {\n      return <Alert color=\"danger\">Query result is of wrong type '{this.props.data.resultType}', should be 'matrix' (range vector).</Alert>;\n    }\n\n    if (this.props.data.result.length === 0) {\n      return <Alert color=\"secondary\">Empty query result</Alert>;\n    }\n\n    return (\n      <div className=\"graph\">\n        <ReactResizeDetector handleWidth onResize={() => this.plot()} />\n        <div className=\"graph-chart\" ref={this.chartRef} />\n        <Legend series={this.getData()}/>\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\n\nimport {\n  Alert,\n  Button,\n  Col,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane,\n} from 'reactstrap';\n\nimport moment from 'moment-timezone';\n\nimport ExpressionInput from './ExpressionInput';\nimport GraphControls from './GraphControls';\nimport Graph from './Graph';\nimport DataTable from './DataTable';\nimport TimeInput from './TimeInput';\n\ninterface PanelProps {\n  options: PanelOptions;\n  onOptionsChanged: (opts: PanelOptions) => void;\n  metricNames: string[];\n  removePanel: () => void;\n}\n\ninterface PanelState {\n  data: any; // TODO: Type data.\n  lastQueryParams: { // TODO: Share these with Graph.tsx in a file.\n    startTime: number,\n    endTime: number,\n    resolution: number,\n  } | null;\n  loading: boolean;\n  error: string | null;\n  stats: null; // TODO: Stats.\n}\n\nexport interface PanelOptions {\n  expr: string;\n  type: PanelType;\n  range: number; // Range in seconds.\n  endTime: number | null; // Timestamp in milliseconds.\n  resolution: number | null; // Resolution in seconds.\n  stacked: boolean;\n}\n\nexport enum PanelType {\n  Graph = 'graph',\n  Table = 'table',\n}\n\nexport const PanelDefaultOptions: PanelOptions = {\n  type: PanelType.Table,\n  expr: '',\n  range: 3600,\n  endTime: null,\n  resolution: null,\n  stacked: false,\n}\n\nclass Panel extends Component<PanelProps, PanelState> {\n  private abortInFlightFetch: (() => void) | null = null;\n\n  constructor(props: PanelProps) {\n    super(props);\n\n    this.state = {\n      data: null,\n      lastQueryParams: null,\n      loading: false,\n      error: null,\n      stats: null,\n    };\n  }\n\n  componentDidUpdate(prevProps: PanelProps, prevState: PanelState) {\n    const prevOpts = prevProps.options;\n    const opts = this.props.options;\n    if (prevOpts.type !== opts.type ||\n        prevOpts.range !== opts.range ||\n        prevOpts.endTime !== opts.endTime ||\n        prevOpts.resolution !== opts.resolution) {\n\n      if (prevOpts.type !== opts.type) {\n        // If the other options change, we still want to show the old data until the new\n        // query completes, but this is not a good idea when we actually change between\n        // table and graph view, since not all queries work well in both.\n        this.setState({data: null});\n      }\n      this.executeQuery(opts.expr);\n    }\n  }\n\n  componentDidMount() {\n    this.executeQuery(this.props.options.expr);\n  }\n\n  executeQuery = (expr: string): void => {\n    if (this.props.options.expr !== expr) {\n      this.setOptions({expr: expr});\n    }\n    if (expr === '') {\n      return;\n    }\n\n    if (this.abortInFlightFetch) {\n      this.abortInFlightFetch();\n      this.abortInFlightFetch = null;\n    }\n\n    const abortController = new AbortController();\n    this.abortInFlightFetch = () => abortController.abort();\n    this.setState({loading: true});\n\n    const endTime = this.getEndTime().valueOf() / 1000; // TODO: shouldn't valueof only work when it's a moment?\n    const startTime = endTime - this.props.options.range;\n    const resolution = this.props.options.resolution || Math.max(Math.floor(this.props.options.range / 250), 1);\n\n    const url = new URL(window.location.href);\n    const params: {[key: string]: string} = {\n      'query': expr,\n    };\n\n    switch (this.props.options.type) {\n      case 'graph':\n        url.pathname = '../../api/v1/query_range'\n        Object.assign(params, {\n          start: startTime,\n          end: endTime,\n          step: resolution,\n        })\n        // TODO path prefix here and elsewhere.\n        break;\n      case 'table':\n        url.pathname = '../../api/v1/query'\n        Object.assign(params, {\n          time: endTime,\n        })\n        break;\n      default:\n        throw new Error('Invalid panel type \"' + this.props.options.type + '\"');\n    }\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\n    fetch(url.toString(), {cache: 'no-store', signal: abortController.signal})\n    .then(resp => resp.json())\n    .then(json => {\n      if (json.status !== 'success') {\n        throw new Error(json.error || 'invalid response JSON');\n      }\n\n      this.setState({\n        error: null,\n        data: json.data,\n        lastQueryParams: {\n          startTime: startTime,\n          endTime: endTime,\n          resolution: resolution,\n        },\n        loading: false,\n      });\n      this.abortInFlightFetch = null;\n    })\n    .catch(error => {\n      if (error.name === 'AbortError') {\n        // Aborts are expected, don't show an error for them.\n        return\n      }\n      this.setState({\n        error: 'Error executing query: ' + error.message,\n        loading: false,\n      })\n    });\n  }\n\n  setOptions(opts: object): void {\n    const newOpts = {...this.props.options, ...opts};\n    this.props.onOptionsChanged(newOpts);\n  }\n\n  handleExpressionChange = (expr: string): void => {\n    this.setOptions({expr: expr});\n  }\n\n  handleChangeRange = (range: number): void => {\n    this.setOptions({range: range});\n  }\n\n  getEndTime = (): number | moment.Moment => {\n    if (this.props.options.endTime === null) {\n      return moment();\n    }\n    return this.props.options.endTime;\n  }\n\n  handleChangeEndTime = (endTime: number | null) => {\n    this.setOptions({endTime: endTime});\n  }\n\n  handleChangeResolution = (resolution: number | null) => {\n    this.setOptions({resolution: resolution});\n  }\n\n  handleChangeStacking = (stacked: boolean) => {\n    this.setOptions({stacked: stacked});\n  }\n\n  render() {\n    return (\n      <div className=\"panel\">\n        <Row>\n          <Col>\n            <ExpressionInput\n              value={this.props.options.expr}\n              executeQuery={this.executeQuery}\n              loading={this.state.loading}\n              metricNames={this.props.metricNames}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {this.state.error && <Alert color=\"danger\">{this.state.error}</Alert>}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Nav tabs>\n              <NavItem>\n                <NavLink\n                  className={this.props.options.type === 'table' ? 'active' : ''}\n                  onClick={() => { this.setOptions({type: 'table'}); }}\n                >\n                  Table\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={this.props.options.type === 'graph' ? 'active' : ''}\n                  onClick={() => { this.setOptions({type: 'graph'}); }}\n                >\n                  Graph\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={this.props.options.type}>\n              <TabPane tabId=\"table\">\n                {this.props.options.type === 'table' &&\n                  <>\n                    <div className=\"table-controls\">\n                      <TimeInput\n                        time={this.props.options.endTime}\n                        range={this.props.options.range}\n                        placeholder=\"Evaluation time\"\n                        onChangeTime={this.handleChangeEndTime}\n                      />\n                    </div>\n                    <DataTable data={this.state.data} />\n                  </>\n                }\n              </TabPane>\n              <TabPane tabId=\"graph\">\n                {this.props.options.type === 'graph' &&\n                  <>\n                    <GraphControls\n                      range={this.props.options.range}\n                      endTime={this.props.options.endTime}\n                      resolution={this.props.options.resolution}\n                      stacked={this.props.options.stacked}\n\n                      onChangeRange={this.handleChangeRange}\n                      onChangeEndTime={this.handleChangeEndTime}\n                      onChangeResolution={this.handleChangeResolution}\n                      onChangeStacking={this.handleChangeStacking}\n                    />\n                    <Graph data={this.state.data} stacked={this.props.options.stacked} queryParams={this.state.lastQueryParams} />\n                  </>\n                }\n              </TabPane>\n            </TabContent>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button className=\"float-right\" color=\"link\" onClick={this.props.removePanel} size=\"sm\">Remove Panel</Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Panel;\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { Alert, Table } from 'reactstrap';\n\nimport SeriesName from './SeriesName';\n\nexport interface QueryResult {\n  data: null | {\n    resultType: 'vector',\n    result: InstantSample[],\n  } | {\n    resultType: 'matrix',\n    result: RangeSamples[],\n  } | {\n    resultType: 'scalar',\n    result: SampleValue,\n  } | {\n    resultType: 'string',\n    result: string,\n  },\n};\n\ninterface InstantSample {\n  metric: Metric,\n  value: SampleValue,\n}\n\ninterface RangeSamples {\n  metric: Metric,\n  values: SampleValue[],\n}\n\ninterface Metric {\n  [key: string]: string,\n}\n\ntype SampleValue = [number, string];\n\nclass DataTable extends PureComponent<QueryResult> {\n  limitSeries(series: InstantSample[] | RangeSamples[]): InstantSample[] | RangeSamples[] {\n    const maxSeries = 10000;\n\n    if (series.length > maxSeries) {\n      return series.slice(0, maxSeries);\n    }\n    return series;\n  }\n\n  render() {\n    const data = this.props.data;\n\n    if (data === null) {\n      return <Alert color=\"light\">No data queried yet</Alert>;\n    }\n\n    if (data.result === null || data.result.length === 0) {\n      return <Alert color=\"secondary\">Empty query result</Alert>;\n    }\n\n    let rows: ReactNode[] = [];\n    let limited = false;\n    switch(data.resultType) {\n      case 'vector':\n        rows = (this.limitSeries(data.result) as InstantSample[])\n          .map((s: InstantSample, index: number): ReactNode => {\n            return <tr key={index}><td><SeriesName labels={s.metric} format={false}/></td><td>{s.value[1]}</td></tr>;\n          });\n        limited = rows.length != data.result.length;\n        break;\n      case 'matrix':\n        rows = (this.limitSeries(data.result) as RangeSamples[])\n          .map((s, index) => {\n            const valueText = s.values.map((v) => {\n              return [1] + ' @' + v[0];\n            }).join('\\n');\n            return <tr style={{whiteSpace: 'pre'}} key={index}><td><SeriesName labels={s.metric} format={false}/></td><td>{valueText}</td></tr>;\n          });\n        limited = rows.length != data.result.length;\n        break;\n      case 'scalar':\n        rows.push(<tr><td>scalar</td><td>{data.result[1]}</td></tr>);\n        break;\n      case 'string':\n        rows.push(<tr><td>scalar</td><td>{data.result[1]}</td></tr>);\n        break;\n      default:\n        return <Alert color=\"danger\">Unsupported result value type</Alert>;\n    }\n\n    return (\n      <>\n        {limited &&\n          <Alert color=\"danger\">\n            <strong>Warning:</strong> Fetched {data.result.length} metrics, only displaying first {rows.length}.\n          </Alert>\n        }\n        <Table hover size=\"sm\" className=\"data-table\">\n          <tbody>\n            {rows}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default DataTable;\n","import { parseRange, parseTime, formatRange, formatTime } from './timeFormat';\nimport { PanelOptions, PanelType, PanelDefaultOptions } from '../Panel';\n\nexport function decodePanelOptionsFromQueryString(query: string): {key: string, options: PanelOptions}[] {\n  if (query === '') {\n    return [];\n  }\n\n  const params = query.substring(1).split('&');\n  return parseParams(params);\n}\n\nconst paramFormat = /^g\\d+\\..+=.+$/;\n\ninterface IncompletePanelOptions {\n  expr?: string;\n  type?: PanelType;\n  range?: number;\n  endTime?: number | null;\n  resolution?: number | null;\n  stacked?: boolean;\n}\n\nfunction parseParams(params: string[]): {key: string, options: PanelOptions}[] {\n  const sortedParams = params.filter((p) => {\n    return paramFormat.test(p);\n  }).sort();\n\n  let panelOpts: {key: string, options: PanelOptions}[] = [];\n\n  let key = 0;\n  let options: IncompletePanelOptions = {};\n  for (const p of sortedParams) {\n    const prefix = 'g' + key + '.';\n\n    if (!p.startsWith(prefix)) {\n      panelOpts.push({\n        key: key.toString(),\n        options: {...PanelDefaultOptions, ...options},\n      });\n      options = {};\n      key++;\n    }\n\n    addParam(options, p.substring(prefix.length));\n  }\n  panelOpts.push({\n    key: key.toString(),\n    options: {...PanelDefaultOptions, ...options},\n  });\n\n  return panelOpts;\n}\n\nfunction addParam(opts: IncompletePanelOptions, param: string): void {\n  let [ opt, val ] = param.split('=');\n  val = decodeURIComponent(val.replace(/\\+/g, ' '));\n\n  switch(opt) {\n    case 'expr':\n      opts.expr = val;\n      break;\n\n    case 'tab':\n      if (val === '0') {\n        opts.type = PanelType.Graph;\n      } else {\n        opts.type = PanelType.Table;\n      }\n      break;\n\n    case 'stacked':\n      opts.stacked = val === '1';\n      break;\n\n    case 'range_input':\n      const range = parseRange(val);\n      if (range !== null) {\n        opts.range = range;\n      }\n      break;\n\n    case 'end_input':\n      opts.endTime = parseTime(val);\n      break;\n\n    case 'step_input':\n      const res = parseInt(val);\n      if (res > 0) {\n        opts.resolution = res;\n      }\n      break;\n\n    case 'moment_input':\n      opts.endTime = parseTime(val);\n      break;\n  }\n}\n\nexport function encodePanelOptionsToQueryString(panels: {key: string, options: PanelOptions}[]): string {\n  const queryParams: string[] = [];\n\n  panels.forEach(p => {\n    const prefix = 'g' + p.key + '.';\n    const o = p.options;\n    const panelParams: {[key: string]: string | undefined} = {\n      'expr': o.expr,\n      'tab': o.type === PanelType.Graph ? '0' : '1',\n      'stacked': o.stacked ? '1' : '0',\n      'range_input': formatRange(o.range),\n      'end_input': o.endTime !== null ? formatTime(o.endTime) : undefined,\n      'moment_input': o.endTime !== null ? formatTime(o.endTime) : undefined,\n      'step_input': o.resolution !== null ? o.resolution.toString() : undefined,\n    };\n\n    for (let o in panelParams) {\n      const pp = panelParams[o];\n      if (pp !== undefined) {\n        queryParams.push(prefix + o + '=' + encodeURIComponent(pp));\n      }\n    }\n  })\n\n  return '?' + queryParams.join('&');\n}\n","import React, { Component } from 'react';\n\nimport { Alert, Button, Col, Row } from 'reactstrap';\n\nimport Panel, { PanelOptions, PanelType, PanelDefaultOptions } from './Panel';\nimport { decodePanelOptionsFromQueryString, encodePanelOptionsToQueryString } from './utils/urlParams';\n\ninterface PanelListState {\n  panels: {\n    key: string;\n    options: PanelOptions;\n  }[],\n  metricNames: string[];\n  fetchMetricsError: string | null;\n  timeDriftError: string | null;\n}\n\nclass PanelList extends Component<any, PanelListState> {\n  private key: number = 0;\n\n  constructor(props: any) {\n    super(props);\n\n    const urlPanels = decodePanelOptionsFromQueryString(window.location.search);\n\n    this.state = {\n      panels: urlPanels.length !== 0 ? urlPanels : [\n        {\n          key: this.getKey(),\n          options: PanelDefaultOptions,\n        },\n      ],\n      metricNames: [],\n      fetchMetricsError: null,\n      timeDriftError: null,\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"../../api/v1/label/__name__/values\", {cache: \"no-store\"})\n    .then(resp => {\n      if (resp.ok) {\n        return resp.json();\n      } else {\n        throw new Error('Unexpected response status when fetching metric names: ' + resp.statusText); // TODO extract error\n      }\n    })\n    .then(json => this.setState({ metricNames: json.data }))\n    .catch(error => this.setState({ fetchMetricsError: error.message }));\n\n    const browserTime = new Date().getTime() / 1000;\n    fetch(\"../../api/v1/query?query=time()\", {cache: \"no-store\"})\n    .then(resp => {\n      if (resp.ok) {\n        return resp.json();\n      } else {\n        throw new Error('Unexpected response status when fetching metric names: ' + resp.statusText); // TODO extract error\n      }\n    })\n    .then(json => {\n      const serverTime = json.data.result[0];\n      const delta = Math.abs(browserTime - serverTime);\n\n      if (delta >= 30) {\n        throw new Error('Detected ' + delta + ' seconds time difference between your browser and the server. Prometheus relies on accurate time and time drift might cause unexpected query results.');\n      }\n    })\n    .catch(error => this.setState({ timeDriftError: error.message }));\n\n    window.onpopstate = () => {\n      const panels = decodePanelOptionsFromQueryString(window.location.search);\n      if (panels.length !== 0) {\n        this.setState({panels: panels});\n      }\n    }\n  }\n\n  getKey(): string {\n    return (this.key++).toString();\n  }\n\n  handleOptionsChanged(key: string, opts: PanelOptions): void {\n    const newPanels = this.state.panels.map(p => {\n      if (key === p.key) {\n        return {\n          key: key,\n          options: opts,\n        }\n      }\n      return p;\n    });\n    console.log(\"UPDATE OP\", key, opts);\n    this.setState({panels: newPanels}, this.updateURL)\n  }\n\n  updateURL(): void {\n    console.log(\"UPDATE\");\n    const query = encodePanelOptionsToQueryString(this.state.panels);\n    history.pushState({}, '', query);\n  }\n\n  addPanel = (): void => {\n    const panels = this.state.panels.slice();\n    panels.push({\n      key: this.getKey(),\n      options: PanelDefaultOptions,\n    });\n    this.setState({panels: panels}, this.updateURL);\n  }\n\n  removePanel = (key: string): void => {\n    const panels = this.state.panels.filter(panel => {\n      return panel.key !== key;\n    });\n    this.setState({panels: panels}, this.updateURL);\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Col>\n            {this.state.timeDriftError && <Alert color=\"danger\"><strong>Warning:</strong> Error fetching server time: {this.state.timeDriftError}</Alert>}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {this.state.fetchMetricsError && <Alert color=\"danger\"><strong>Warning:</strong> Error fetching metrics list: {this.state.fetchMetricsError}</Alert>}\n          </Col>\n        </Row>\n        {this.state.panels.map(p =>\n          <Panel\n            key={p.key}\n            options={p.options}\n            onOptionsChanged={(opts: PanelOptions) => this.handleOptionsChanged(p.key, opts)}\n            removePanel={() => this.removePanel(p.key)}\n            metricNames={this.state.metricNames}\n          />\n        )}\n        <Button color=\"primary\" className=\"add-panel-btn\" onClick={this.addPanel}>Add Panel</Button>\n      </>\n    );\n  }\n}\n\nexport default PanelList;\n","import React, { Component, ReactNode } from 'react';\n\nimport { Container } from 'reactstrap';\n\nimport PanelList from './PanelList';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container fluid={true}>\n        <PanelList />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import './globals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}